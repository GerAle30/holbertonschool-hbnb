#!/usr/bin/env python3
"""
SQLite-Compatible Database Test Script for HBnB
This script tests the database using SQLAlchemy models and SQLite-compatible queries
"""

from app import create_app, db
from app.models.user import User
from app.models.place import Place
from app.models.reviews import Review
from app.models.amenities import Amenity
from sqlalchemy import text, inspect
import uuid

def test_database_comprehensive():
    """Run comprehensive database tests compatible with SQLite."""
    
    print("HBnB Database Comprehensive Test Suite (SQLite)")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            # Test 1: Table Creation and Structure
            print("\nTEST 1: TABLE CREATION AND STRUCTURE")
            print("-" * 40)
            
            # Drop and recreate tables
            db.drop_all()
            db.create_all()
            
            # Check tables exist
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            expected_tables = {'users', 'places', 'reviews', 'amenities', 'place_amenities'}
            
            if expected_tables.issubset(set(tables)):
                print("✓ All required tables created")
                print(f"  Tables: {sorted(tables)}")
            else:
                missing = expected_tables - set(tables)
                print(f"✗ Missing tables: {missing}")
                return False
            
            # Test table structures
            for table in expected_tables:
                columns = inspector.get_columns(table)
                column_names = [col['name'] for col in columns]
                print(f"  {table}: {len(columns)} columns - {column_names}")
            
            # Test 2: Initial Data Insertion
            print("\nTEST 2: INITIAL DATA INSERTION")
            print("-" * 40)
            
            # Create admin user with specified UUID
            admin_user = User(
                first_name='Admin',
                last_name='HBnB',
                email='admin@hbnb.io',
                is_admin=True
            )
            admin_user.id = '36c9050e-ddd3-4c3b-9731-9f487208bbc1'
            admin_user.hash_password('admin1234')
            
            # Create initial amenities with specified UUIDs
            wifi = Amenity(name='WiFi')
            wifi.id = 'ccaf6b6c-b86d-4dec-8a87-8a3050d1e463'
            
            pool = Amenity(name='Swimming Pool')
            pool.id = '075fd2d0-2b15-432a-862d-516366d41465'
            
            ac = Amenity(name='Air Conditioning')
            ac.id = '6e59f738-be8e-40ce-9e8b-9af7d6b816db'
            
            db.session.add_all([admin_user, wifi, pool, ac])\n            db.session.commit()\n            \n            # Verify initial data\n            print(f\"✓ Admin user created: {admin_user.email}\")\n            print(f\"  UUID: {admin_user.id}\")\n            print(f\"  Admin status: {admin_user.is_admin}\")\n            print(f\"  Password hash: {admin_user.password[:20]}...\")\n            \n            print(f\"✓ Initial amenities created:\")\n            for amenity in [wifi, pool, ac]:\n                print(f\"  - {amenity.name} (ID: {amenity.id})\")\n            \n            # Test password verification\n            password_test = admin_user.verify_password('admin1234')\n            print(f\"✓ Password verification: {'PASS' if password_test else 'FAIL'}\")\n            \n            # Test 3: CRUD Operations\n            print(\"\\nTEST 3: CRUD OPERATIONS\")\n            print(\"-\" * 40)\n            \n            # CREATE operations\n            print(\"Testing CREATE operations...\")\n            \n            # Create test user\n            test_user = User(\n                first_name='Test',\n                last_name='User',\n                email='test@example.com',\n                is_admin=False\n            )\n            test_user.hash_password('testpass')\n            db.session.add(test_user)\n            db.session.commit()\n            print(f\"✓ Created test user: {test_user.email}\")\n            \n            # Create test place\n            test_place = Place(\n                title='Test Place',\n                description='A place for testing CRUD operations',\n                price=150.00,\n                latitude=40.7128,\n                longitude=-74.0060,\n                owner_id=test_user.id\n            )\n            db.session.add(test_place)\n            db.session.commit()\n            print(f\"✓ Created test place: {test_place.title}\")\n            \n            # Create test review\n            test_review = Review(\n                text='Great place for testing!',\n                rating=5,\n                user_id=admin_user.id,\n                place_id=test_place.id\n            )\n            db.session.add(test_review)\n            db.session.commit()\n            print(f\"✓ Created test review: Rating {test_review.rating}/5\")\n            \n            # Test many-to-many relationship\n            test_place.amenities.append(wifi)\n            test_place.amenities.append(pool)\n            db.session.commit()\n            print(f\"✓ Added amenities to place: {[a.name for a in test_place.amenities]}\")\n            \n            # READ operations\n            print(\"\\nTesting READ operations...\")\n            \n            # Count records\n            user_count = User.query.count()\n            place_count = Place.query.count()\n            review_count = Review.query.count()\n            amenity_count = Amenity.query.count()\n            \n            print(f\"✓ Record counts - Users: {user_count}, Places: {place_count}, Reviews: {review_count}, Amenities: {amenity_count}\")\n            \n            # Test relationships\n            print(\"\\nTesting relationships...\")\n            \n            # User-Place relationship (One-to-Many)\n            user_places = test_user.places\n            print(f\"✓ User-Place relationship: User {test_user.email} owns {len(user_places)} places\")\n            \n            # Place-Review relationship (One-to-Many)\n            place_reviews = test_place.reviews\n            print(f\"✓ Place-Review relationship: Place '{test_place.title}' has {len(place_reviews)} reviews\")\n            \n            # User-Review relationship (One-to-Many)\n            user_reviews = admin_user.reviews\n            print(f\"✓ User-Review relationship: User {admin_user.email} wrote {len(user_reviews)} reviews\")\n            \n            # Place-Amenity relationship (Many-to-Many)\n            place_amenities = test_place.amenities\n            print(f\"✓ Place-Amenity relationship: Place has {len(place_amenities)} amenities\")\n            \n            # UPDATE operations\n            print(\"\\nTesting UPDATE operations...\")\n            \n            # Update user\n            original_lastname = test_user.last_name\n            test_user.last_name = 'UpdatedUser'\n            db.session.commit()\n            print(f\"✓ Updated user last name: {original_lastname} -> {test_user.last_name}\")\n            \n            # Update place\n            original_price = test_place.price\n            test_place.price = 200.00\n            test_place.description = 'Updated description for testing'\n            db.session.commit()\n            print(f\"✓ Updated place price: {original_price} -> {test_place.price}\")\n            \n            # Update review\n            original_rating = test_review.rating\n            test_review.rating = 4\n            test_review.text = 'Updated review text - still good!'\n            db.session.commit()\n            print(f\"✓ Updated review rating: {original_rating} -> {test_review.rating}\")\n            \n            # Update amenity\n            original_name = ac.name\n            ac.name = 'Updated Air Conditioning'\n            db.session.commit()\n            print(f\"✓ Updated amenity name: {original_name} -> {ac.name}\")\n            \n            # Test 4: Constraint Testing\n            print(\"\\nTEST 4: CONSTRAINT TESTING\")\n            print(\"-\" * 40)\n            \n            # Test unique email constraint\n            try:\n                duplicate_user = User(\n                    first_name='Duplicate',\n                    last_name='User',\n                    email='admin@hbnb.io',  # Duplicate email\n                    is_admin=False\n                )\n                duplicate_user.hash_password('password')\n                db.session.add(duplicate_user)\n                db.session.commit()\n                print(\"✗ Unique constraint test: FAIL - Duplicate email allowed\")\n            except Exception as e:\n                db.session.rollback()\n                print(\"✓ Unique constraint test: PASS - Duplicate email prevented\")\n            \n            # Test rating constraint (model-level validation)\n            try:\n                invalid_review = Review(\n                    text='Invalid rating test',\n                    rating=6,  # Invalid rating\n                    user_id=admin_user.id,\n                    place_id=test_place.id\n                )\n                print(\"✗ Rating constraint test: FAIL - Invalid rating allowed\")\n            except ValueError:\n                print(\"✓ Rating constraint test: PASS - Invalid rating prevented\")\n            \n            # Test price constraint (model-level validation)\n            try:\n                invalid_place = Place(\n                    title='Invalid Price Place',\n                    description='Testing negative price',\n                    price=-50.00,  # Invalid price\n                    latitude=40.0,\n                    longitude=-74.0,\n                    owner_id=test_user.id\n                )\n                print(\"✗ Price constraint test: FAIL - Negative price allowed\")\n            except ValueError:\n                print(\"✓ Price constraint test: PASS - Negative price prevented\")\n            \n            # Test 5: Foreign Key Relationships\n            print(\"\\nTEST 5: FOREIGN KEY RELATIONSHIPS\")\n            print(\"-\" * 40)\n            \n            # Test cascade deletion\n            place_id = test_place.id\n            review_id = test_review.id\n            \n            # Delete user (should cascade to places and reviews)\n            db.session.delete(test_user)\n            db.session.commit()\n            \n            # Verify cascade deletion\n            remaining_place = Place.query.get(place_id)\n            remaining_review = Review.query.get(review_id)\n            \n            if remaining_place is None:\n                print(\"✓ Cascade deletion: Place deleted when owner deleted\")\n            else:\n                print(\"✗ Cascade deletion: Place not deleted when owner deleted\")\n            \n            if remaining_review is None:\n                print(\"✓ Cascade deletion: Review deleted when user deleted\")\n            else:\n                print(\"✗ Cascade deletion: Review not deleted when user deleted\")\n            \n            # Test 6: Complex Queries\n            print(\"\\nTEST 6: COMPLEX QUERIES\")\n            print(\"-\" * 40)\n            \n            # Create some test data for complex queries\n            user1 = User(first_name='Alice', last_name='Smith', email='alice@test.com')\n            user1.hash_password('password')\n            user2 = User(first_name='Bob', last_name='Jones', email='bob@test.com')\n            user2.hash_password('password')\n            \n            place1 = Place(title='Alice Place', description='Place by Alice', price=100, \n                          latitude=40.0, longitude=-74.0, owner_id=admin_user.id)\n            place2 = Place(title='Admin Place', description='Another place', price=200,\n                          latitude=41.0, longitude=-75.0, owner_id=admin_user.id)\n            \n            db.session.add_all([user1, user2, place1, place2])\n            db.session.commit()\n            \n            # Add amenities to places\n            place1.amenities.extend([wifi, pool])\n            place2.amenities.append(wifi)\n            db.session.commit()\n            \n            # Add reviews\n            review1 = Review(text='Great place!', rating=5, user_id=user1.id, place_id=place1.id)\n            review2 = Review(text='Good place', rating=4, user_id=user2.id, place_id=place1.id)\n            review3 = Review(text='Excellent!', rating=5, user_id=user1.id, place_id=place2.id)\n            \n            db.session.add_all([review1, review2, review3])\n            db.session.commit()\n            \n            # Test complex queries\n            \n            # Places with WiFi\n            wifi_places = Place.query.filter(Place.amenities.contains(wifi)).all()\n            print(f\"✓ Places with WiFi: {len(wifi_places)} places\")\n            \n            # Places with rating >= 4\n            high_rated_places = Place.query.join(Review).filter(Review.rating >= 4).distinct().all()\n            print(f\"✓ Places with high ratings: {len(high_rated_places)} places\")\n            \n            # Users who wrote reviews\n            reviewers = User.query.filter(User.reviews.any()).all()\n            print(f\"✓ Users who wrote reviews: {len(reviewers)} users\")\n            \n            # Places by admin user\n            admin_places = Place.query.filter_by(owner_id=admin_user.id).all()\n            print(f\"✓ Places owned by admin: {len(admin_places)} places\")\n            \n            # Final counts\n            print(\"\\nFINAL DATABASE STATE:\")\n            print(\"-\" * 40)\n            final_users = User.query.count()\n            final_places = Place.query.count()\n            final_reviews = Review.query.count()\n            final_amenities = Amenity.query.count()\n            \n            print(f\"Users: {final_users}\")\n            print(f\"Places: {final_places}\")\n            print(f\"Reviews: {final_reviews}\")\n            print(f\"Amenities: {final_amenities}\")\n            \n            # Verify admin user still exists\n            final_admin = User.query.filter_by(email='admin@hbnb.io').first()\n            if final_admin:\n                print(f\"✓ Admin user verified: {final_admin.email} (Admin: {final_admin.is_admin})\")\n            else:\n                print(\"✗ Admin user not found\")\n                return False\n            \n            # Verify amenities exist\n            final_amenity_names = [a.name for a in Amenity.query.all()]\n            expected_amenities = ['WiFi', 'Swimming Pool', 'Updated Air Conditioning']\n            if all(amenity in final_amenity_names for amenity in expected_amenities):\n                print(f\"✓ All amenities present: {final_amenity_names}\")\n            else:\n                print(f\"✗ Missing amenities. Found: {final_amenity_names}\")\n                return False\n            \n            print(\"\\n\" + \"=\" * 60)\n            print(\"✓ ALL DATABASE TESTS PASSED!\")\n            print(\"\\nTest Results Summary:\")\n            print(\"- Table creation and structure: PASS\")\n            print(\"- Initial data insertion: PASS\")\n            print(\"- CRUD operations: PASS\")\n            print(\"- Constraint enforcement: PASS\")\n            print(\"- Foreign key relationships: PASS\")\n            print(\"- Complex queries: PASS\")\n            print(\"- Data integrity: PASS\")\n            \n            return True\n            \n        except Exception as e:\n            print(f\"\\nERROR: Database test failed: {e}\")\n            import traceback\n            traceback.print_exc()\n            return False\n\ndef test_api_with_database():\n    \"\"\"Test API endpoints with the database.\"\"\"\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"API INTEGRATION TESTING\")\n    print(\"=\" * 60)\n    \n    try:\n        app = create_app()\n        \n        with app.test_client() as client:\n            # Test admin login\n            print(\"\\n1. Testing admin authentication...\")\n            login_response = client.post('/api/v1/auth/login',\n                                         json={\n                                             'email': 'admin@hbnb.io',\n                                             'password': 'admin1234'\n                                         },\n                                         content_type='application/json')\n            \n            if login_response.status_code == 200:\n                data = login_response.get_json()\n                if 'access_token' in data:\n                    print(\"✓ Admin login successful\")\n                    token = data['access_token']\n                    \n                    # Test amenities endpoint\n                    print(\"\\n2. Testing amenities endpoint...\")\n                    amenities_response = client.get('/api/v1/amenities/')\n                    if amenities_response.status_code == 200:\n                        amenities_data = amenities_response.get_json()\n                        print(f\"✓ Amenities API: {len(amenities_data)} amenities found\")\n                        for amenity in amenities_data:\n                            print(f\"  - {amenity['name']}\")\n                    else:\n                        print(f\"✗ Amenities API failed: {amenities_response.status_code}\")\n                        return False\n                    \n                    # Test users endpoint\n                    print(\"\\n3. Testing users endpoint...\")\n                    users_response = client.get('/api/v1/users/')\n                    if users_response.status_code == 200:\n                        users_data = users_response.get_json()\n                        admin_found = any(u['email'] == 'admin@hbnb.io' for u in users_data)\n                        print(f\"✓ Users API: {len(users_data)} users found\")\n                        print(f\"✓ Admin user found in API: {admin_found}\")\n                    else:\n                        print(f\"✗ Users API failed: {users_response.status_code}\")\n                        return False\n                    \n                    return True\n                else:\n                    print(\"✗ No access token in login response\")\n                    return False\n            else:\n                print(f\"✗ Admin login failed: {login_response.status_code}\")\n                print(f\"Response: {login_response.get_json()}\")\n                return False\n                \n    except Exception as e:\n        print(f\"ERROR: API test failed: {e}\")\n        return False\n\nif __name__ == '__main__':\n    print(\"Starting SQLite-compatible comprehensive database tests...\")\n    \n    db_success = test_database_comprehensive()\n    api_success = test_api_with_database()\n    \n    print(\"\\n\" + \"=\" * 70)\n    if db_success and api_success:\n        print(\"🎉 OVERALL RESULT: ALL TESTS PASSED! 🎉\")\n        print(\"\\n✓ Database schema created and validated\")\n        print(\"✓ Initial data (admin user + amenities) inserted correctly\")\n        print(\"✓ Admin user password hashed with bcrypt\")\n        print(\"✓ All table relationships working properly\")\n        print(\"✓ CRUD operations functioning correctly\")\n        print(\"✓ Constraints and data integrity enforced\")\n        print(\"✓ API endpoints integrated with database\")\n        print(\"\\n🚀 Database is production-ready!\")\n        print(\"\\nAdmin Credentials:\")\n        print(\"  Email: admin@hbnb.io\")\n        print(\"  Password: admin1234\")\n        print(\"  UUID: 36c9050e-ddd3-4c3b-9731-9f487208bbc1\")\n    else:\n        print(\"❌ OVERALL RESULT: SOME TESTS FAILED!\")\n        print(\"Please review the error messages above.\")\n    print(\"=\" * 70)
